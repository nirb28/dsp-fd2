version: '3.8'

services:
  # APISIX API Gateway
  apisix:
    image: apache/apisix:3.8.0-debian
    container_name: apisix
    restart: always
    volumes:
      - ./apisix-config/apisix.yaml:/usr/local/apisix/conf/apisix.yaml:ro
      - ./apisix-config/config.yaml:/usr/local/apisix/conf/config.yaml:ro
    environment:
      - APISIX_STAND_ALONE=false
    ports:
      - "9080:9080"  # Gateway port
      - "9091:9091"  # Prometheus metrics port
      - "9443:9443"  # Gateway HTTPS port
      - "9092:9092"  # Control API port
    networks:
      - apisix-network
    depends_on:
      - etcd

  # APISIX Dashboard
  apisix-dashboard:
    image: apache/apisix-dashboard:3.0.1
    container_name: apisix-dashboard
    restart: always
    volumes:
      - ./apisix-config/dashboard.yaml:/usr/local/apisix-dashboard/conf/conf.yaml:ro
    ports:
      - "9000:9000"
    networks:
      - apisix-network
    depends_on:
      - apisix

  # etcd for APISIX configuration storage
  etcd:
    image: bitnami/etcd:3.5.11
    container_name: apisix-etcd
    restart: always
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
    ports:
      - "2379:2379"
    networks:
      - apisix-network

  # Front Door service with APISIX integration
  front-door:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: front-door-apisix
    restart: always
    environment:
      - CONTROL_TOWER_URL=http://control-tower:8081
      - APISIX_ADMIN_URL=http://apisix:9180
      - APISIX_ADMIN_KEY=edd1c9f034335f136f87ad84b625c8f1
      - APISIX_GATEWAY_URL=http://apisix:9080
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENVIRONMENT=production
      - AUTO_CONFIGURE_ROUTES=true
      - LOG_LEVEL=INFO
    ports:
      - "8080:8080"
    networks:
      - apisix-network
    depends_on:
      - apisix
      - control-tower

  # Control Tower service
  control-tower:
    image: dsp-ai-control-tower:latest
    container_name: control-tower
    restart: always
    environment:
      - SUPERUSER_USERNAME=${SUPERUSER_USERNAME}
      - SUPERUSER_PASSWORD=${SUPERUSER_PASSWORD}
      - CLIENT_SECRETS_FILE=/app/config/client_secrets.json
    volumes:
      - ./manifests:/app/manifests
      - ./policies:/app/policies
      - ./config:/app/config
    ports:
      - "8081:8081"
    networks:
      - apisix-network

  # Sample LLM service (replace with actual)
  llm-service-1:
    image: nginx:alpine
    container_name: llm-service-1
    networks:
      - apisix-network
    volumes:
      - ./mock-llm-response.conf:/etc/nginx/conf.d/default.conf:ro

  llm-service-2:
    image: nginx:alpine
    container_name: llm-service-2
    networks:
      - apisix-network
    volumes:
      - ./mock-llm-response.conf:/etc/nginx/conf.d/default.conf:ro

  llm-service-3:
    image: nginx:alpine
    container_name: llm-service-3
    networks:
      - apisix-network
    volumes:
      - ./mock-llm-response.conf:/etc/nginx/conf.d/default.conf:ro

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - apisix-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.2.3
    container_name: grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    ports:
      - "3000:3000"
    networks:
      - apisix-network
    depends_on:
      - prometheus

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - apisix-network
    volumes:
      - redis-data:/data

networks:
  apisix-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
  redis-data:

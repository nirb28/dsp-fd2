version: '3.8'

services:
  # Front Door Service
  dsp-fd2:
    build: .
    container_name: dsp-fd2
    ports:
      - "8080:8080"
    environment:
      - ENV=development
      - LOG_LEVEL=DEBUG
      - CONTROL_TOWER_URL=http://control-tower:8081
      - VAULT_URL=http://vault:8200
      - JWT_SERVICE_URL=http://jwt-service:8082
      - REDIS_URL=redis://redis:6379/0
      - VAULT_TOKEN=${VAULT_TOKEN:-root}
    volumes:
      - ./src:/app/src
      - ./manifests:/app/manifests
      - ./logs:/app/logs
    depends_on:
      - redis
      - vault
      - control-tower
      - jwt-service
    networks:
      - dsp-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: dsp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dsp-network

  # HashiCorp Vault for secrets
  vault:
    image: vault:1.15
    container_name: dsp-vault
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/file
    networks:
      - dsp-network

  # Control Tower (using existing service)
  control-tower:
    build:
      context: ../dsp-ai-control-tower
      dockerfile: Dockerfile
    container_name: dsp-control-tower
    ports:
      - "8081:8081"
    environment:
      - ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/control_tower
    volumes:
      - ../dsp-ai-control-tower:/app
    depends_on:
      - postgres
    networks:
      - dsp-network

  # JWT Service (using existing service)
  jwt-service:
    build:
      context: ../dsp_ai_jwt
      dockerfile: Dockerfile
    container_name: dsp-jwt-service
    ports:
      - "8082:8082"
    environment:
      - ENV=development
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key}
    volumes:
      - ../dsp_ai_jwt:/app
    networks:
      - dsp-network

  # PostgreSQL for Control Tower
  postgres:
    image: postgres:16-alpine
    container_name: dsp-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=control_tower
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - dsp-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: dsp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - dsp-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: dsp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - dsp-network

networks:
  dsp-network:
    driver: bridge

volumes:
  redis_data:
  vault_data:
  postgres_data:
  prometheus_data:
  grafana_data:
